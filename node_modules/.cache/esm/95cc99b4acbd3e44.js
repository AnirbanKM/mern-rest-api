let Joi,Product,multer,path,CustomErrorHandler,fs,productSchema;_acb‍.x([["default",()=>_acb‍.o]]);_acb‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_acb‍.w("../models",[["Product",["Product"],function(v){Product=v}]]);_acb‍.w("multer",[["default",["multer"],function(v){multer=v}]]);_acb‍.w("path",[["default",["path"],function(v){path=v}]]);_acb‍.w("../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_acb‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_acb‍.w("../validators/productValidator",[["default",["productSchema"],function(v){productSchema=v}]]);







const storage = multer.diskStorage({
    destination: (req, res, cb) => cb(null, 'uploads/'),
    filename: (req, file, cb) => {

        const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1E9)}${path.extname(file.originalname)}`;

        cb(null, uniqueName);
    }
});

const handleMultipartData = multer({ storage, limits: { fileSize: 1000000 * 5 } }).single('image');

const productController = {

    async store(req, res, next) {

        // Multipart form data
        handleMultipartData(req, res, async (err) => {
            if (err) {
                return next(CustomErrorHandler.serverError(err.message));
            }
            const filePath = req.file.path;

            // validation  
            const { error } = productSchema.validate(req.body);

            if (error) {
                // delete the uploaded file
                fs.unlink(`${appRoot}/${filePath}`, (err) => {
                    if (err) {
                        return next(CustomErrorHandler.serverError(err.message));
                    }
                });

                return next(error);
            }

            const { name, price, size } = req.body;
            let document;

            try {
                document = await Product.create({
                    name,
                    price,
                    size,
                    image: filePath
                });


            } catch (err) {
                return next(err);
            }

            res.status(201).json({ document });
        });
    },

    async update(req, res, next) {

        handleMultipartData(req, res, async (err) => {
            if (err) {
                return next(CustomErrorHandler.serverError(err.message));
            }

            let filePath;

            if (req.file) {
                filePath = req.file.path;
            }

            // validation  
            const { error } = productSchema.validate(req.body);

            if (error) {
                // delete the uploaded file
                if (req.file) {
                    fs.unlink(`${appRoot}/${filePath}`, (err) => {
                        if (err) {
                            return next(CustomErrorHandler.serverError(err.message));
                        }
                    });
                }

                return next(error);
            }

            const { name, price, size } = req.body;
            let document;

            try {
                document = await Product.findOneAndUpdate({ _id: req.params.id }, {
                    name,
                    price,
                    size,
                    ...(req.file && { image: filePath })
                }, { new: true });

                _acb‍.g.console.log(document);

            } catch (err) {
                return next(err);
            }

            res.status(201).json({ document });
        });
    },

    async destroy(req, res, next) {
        const document = await Product.findOneAndRemove({ _id: req.params.id });

        if (!document) {
            return next(new Error('Nothing to delete'));
        }

        _acb‍.g.console.log(document);

        // image delete
        const imagePath = document._doc.image;
        fs.unlink(`${appRoot}/${imagePath}`, (err) => {
            if (err) {
                return next(CustomErrorHandler.serverError());
            }
        });

        res.json(document);
    },

    async index(req, res, next) {
        let documents;

        // pagination mongoose pagination

        try {
            documents = await Product.find().select('-updatedAt -__v').sort({ _id: -1 });

        } catch (err) {
            return next(CustomErrorHandler.serverError());
        }

        return res.json(documents);
    }
}

_acb‍.d(productController);